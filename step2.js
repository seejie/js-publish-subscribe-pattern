// 一个庞大的系统，为了提高代码的维护性，总是会拆分成多个模块、组件等
// 究其原因，无非是关注点分离，最少知识原则等
// 模块、组件等在支撑、组装整个系统时，不可避免的就是相互通信
// 常见的有：兄弟通信、父子通信、祖孙通信
// 订阅-发布模式：可以理解为在系统中建立一个卫星通信系统
// 各组件、模块相互留下电话（订阅），在你需要的时候打给我（发布调用我）
// 在不同的开发语言、系统中，订阅、发布、事件中心有着不同的英文翻译，这无关紧要
// 订阅（on）、发布（emit）、事件名称（eventName：相当于电话号码）相对简单
// 基本的调用方式：on(eventName, (data)={}); emit(eventName, data)
// 所以最核心的是：事件中心，理解它是如何存储事件，理解它是如何调度事件，
// 如果想明白了核心的数据结构和算法，那么就自然明白了发布-订阅

// 现在我们开始搭建这样的卫星通信系统，理所当然应该先有一个这样的对象
// 简单来说，最起码至少应该有3个模块：订阅功能、发布功能、电话簿，看起来像这样
const 卫星 = {
  电话簿: {},
  订阅: function(){},
  发布: function(){}
}
// 现在来讨论一下电话簿，这是一个事件和电话号码的匹配关系
// 一个事件，可以被多个组件订阅，所以它的结构看起来像这样
电话簿 = {事件1:[A的电话,B的电话],事件2:[B的电话],事件3:[B的电话,C的电话]}
// 事件名称就是电话簿的属性名称，订阅了事件的组件当然要留下电话
// 注意，多次订阅，并不会去重，电话会被重复记录

// 订阅的过程就是，看看当前的电话簿中有没有记录匹配关系
// 如果有，在当前事件匹配关系中留下电话号码
// 如果没有，新建一个事件匹配关系，并留下电话号码

// 发布的过程就是，看看当前的电话簿中有没有记录匹配关系
// 如果有，找到订阅者的电话，一一通知
// 如果没有，什么都不做

// 此外为了性能考虑，会给系统添加一个取消订阅的功能
// 通过取消订阅，把明确不需要接收信息的组件从电话簿的匹配关系中移除
